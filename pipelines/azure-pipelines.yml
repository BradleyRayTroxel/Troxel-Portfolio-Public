trigger:
  - main

pool:
  vmImage: windows-2025

variables:
  - group: Core-Variables

stages:
- stage: ci_test_pool_capabilities
  displayName: "CI - Test the pool capabilities"
  jobs:
  - job: scripts_test
    displayName: "Scripts"
    steps:
    - script: echo Hello, world!
      displayName: 'Run a one-line script with echo'
    - script: |
        echo Add other tasks to build, test, and deploy your project.
        echo See https://aka.ms/yaml
      displayName: 'Run a multi-line script with echo'
  - job: powershell_test
    displayName: "PowerShell"
    steps:
    - task: PowerShell@2
      displayName: 'PowerShell Version'
      inputs:
        targetType: inline
        script: |
          $PSVersionTable
    - task: PowerShell@2
      displayName: 'PowerShell Write-Host'
      inputs:
        targetType: filePath
        filePath: '$(Build.SourcesDirectory)/scripts/hello-world.ps1'
  - job: bicep_test
    displayName: "Bicep"
    dependsOn: powershell_test
    steps:
    - task: PowerShell@2
      displayName: 'Bicep CLI Version'
      inputs:
        targetType: inline
        script: |
          bicep --version
- stage: ci_lint
  displayName: "CI - Perform lint on code"
  jobs:
  - job: lint_bicep
    displayName: "Lint Bicep"
    steps:
    - task: PowerShell@2
      displayName: 'Lint Bicep'
      inputs:
        workingDirectory: '$(Build.SourcesDirectory)/bicep'
        targetType: inline
        script: |
          bicep build --file main.bicep
- stage: ci_validate
  displayName: "CI - Validate the code in Azure Resource Manager"
  jobs:
  - job: validate_bicep
    displayName: "Validate Bicep"
    steps:
      - task: AzureResourceManagerTemplateDeployment@3
        inputs:
          deploymentName: $(Build.BuildNumber)
          deploymentScope: 'Management Group'
          azureResourceManagerConnection: $(ServiceConnectionName)
          subscriptionId: $(DefaultSubId)
          csmFile: bicep/main.bicep
          deploymentMode: Validation
          overrideParameters: >
            -resourceGroupName "$(DefaultNamePrefix)RG"
            -resourceGroupLocation "$(DefaultDeploymentLocation)"
- stage: ci_preview
  displayName: "CI - Perform preview using what-if"
  jobs:
  - job:
    displayName: "Running Code For Preview"
    steps:
    - task: AzurePowerShell@5
      displayName: "AzurePowershell What-If deployment"
      inputs:
        azureSubscription: $(ServiceConnectionName)
        ScriptType: InlineScript
        Inline: |
          Set-AzContext -SubscriptionId $(DefaultSubId)
          New-AzDeployment `
            -Location "$(DefaultDeploymentLocation)" `
            -TemplateFile "bicep/main.bicep" `
            -resourceGroupName "$(DefaultNamePrefix)RG" `
            -resourceGroupLocation "$(DefaultDeploymentLocation)"
            -WhatIf
- stage: cd_deploy
  displayName: "CD - Begin deployment"
  jobs:
    - deployment: Deploy
      environment: Troxel-Portfolio
      strategy:
        runOnce:
          deploy:
            steps:
            - checkout: self
            - task: AzureResourceManagerTemplateDeployment@3
              name: DeployBicepFile
              displayName: "Deploy Bicep File"
              inputs:
                deploymentName: $(Build.BuildNumber)
                deploymentScope: 'Management Group'
                azureResourceManagerConnection: $(ServiceConnectionName)
                subscriptionId: $(DefaultSubId)
                csmFile: bicep/main.bicep
                deploymentMode: Validation
                overrideParameters: >
                  -resourceGroupName "$(DefaultNamePrefix)RG"
                  -resourceGroupLocation "$(DefaultDeploymentLocation)"
                deploymentOutputs: deploymentOutputs
            - bash: |
                echo "##vso[task.setvariable variable=resourceGroupName;isOutput=true]$(echo $DEPLOYMENT_OUTPUTS | jq -r '.resourceGroupName.value')"
              name: SaveDeploymentOutputs
              displayName: Save deployment outputs into variables
              env:
                DEPLOYMENT_OUTPUTS: $(deploymentOutputs)

- stage: cd_smoke_test
  displayName: "CD - Execute post-deployment checks"
  jobs:
  - job: SmokeTest
    displayName: "Smoke test"
    variables:
      resourceGroupName: $[ stageDependencies.cd_deploy.Deploy.outputs['Deploy.SaveDeploymentOutputs.resourceGroupName'] ]
    steps:
      - task: PowerShell@2
        name: RunSmokeTests
        displayName: "Run smoke tests"
        inputs:
          targetType: inline
          script: |
            $container = New-PesterContainer `
              -Path 'tests/Troxel-Portfolio.Tests.ps1' `
              -Data @{ resourceGroupName = '$(resourceGroupName)' }
            Invoke-Pester `
              -Container $container `
              -CI
      - task: PublishTestResults@2
        name: PublishTestResults
        displayName: "Publish test results"
        condition: always()
        inputs:
          testResultsFormat: NUnit
          testResultsFiles: 'testResults.xml'
